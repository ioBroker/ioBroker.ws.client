{"version":3,"file":"socket.io.js","sourceRoot":"","sources":["../../socket.io.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * ioBroker WebSockets\n * Copyright 2020-2024, bluefox <dogafox@gmail.com>\n * Released under the MIT License.\n * v 2.0.0 (2024_10_02)\n */\ninterface ConnectOptions {\n    /** Connection name, so the backend knows who wants to connect. Optional */\n    name?: string;\n    /** Timeout for answer for ping (pong) */\n    pongTimeout?: number;\n    /** Ping interval */\n    pingInterval?: number;\n    /** connection request timeout */\n    connectTimeout?: number;\n    /** Authentication timeout */\n    authTimeout?: number;\n    /** Interval between connection attempts */\n    connectInterval?: number;\n    /** Every connection attempt the interval increasing at options.connectInterval till max this number */\n    connectMaxAttempt?: number;\n}\n\nconst MESSAGE_TYPES: Record<string, number> = {\n    MESSAGE: 0,\n    PING: 1,\n    PONG: 2,\n    CALLBACK: 3,\n};\n\nconst DEBUG = true;\n\nconst ERRORS: Record<number, string> = {\n    1000: 'CLOSE_NORMAL', // Successful operation / regular socket shutdown\n    1001: 'CLOSE_GOING_AWAY', // Client is leaving (browser tab closing)\n    1002: 'CLOSE_PROTOCOL_ERROR', // Endpoint received a malformed frame\n    1003: 'CLOSE_UNSUPPORTED', // Endpoint received an unsupported frame (e.g., binary-only endpoint received text frame)\n    1005: 'CLOSED_NO_STATUS', // Expected close status, received none\n    1006: 'CLOSE_ABNORMAL', // No close code frame has been received\n    1007: 'Unsupported payload', // Endpoint received an inconsistent message (e.g., malformed UTF-8)\n    1008: 'Policy violation', // Generic code used for situations other than 1003 and 1009\n    1009: 'CLOSE_TOO_LARGE', // Endpoint won't process large frame\n    1010: 'Mandatory extension', // Client wanted an extension which server did not negotiate\n    1011: 'Server error', // Internal server error while operating\n    1012: 'Service restart', // Server/service is restarting\n    1013: 'Try again later', // Temporary server condition forced blocking client's request\n    1014: 'Bad gateway\tServer', // acting as gateway received an invalid response\n    1015: 'TLS handshake fail', // Transport Layer Security handshake failure\n};\n\ntype SocketEventHandler = (...args: any[]) => void;\ntype SocketConnectionHandler = (connected: boolean) => void;\ntype SocketDisconnectionHandler = () => void;\ntype SocketErrorHandler = (err: string) => void;\n\n// possible events: connect, disconnect, reconnect, error, connect_error\nclass SocketClient {\n    private readonly connectHandlers: SocketConnectionHandler[] = [];\n    private readonly reconnectHandlers: SocketConnectionHandler[] = [];\n    private readonly disconnectHandlers: SocketDisconnectionHandler[] = [];\n    private readonly errorHandlers: SocketErrorHandler[] = [];\n\n    private readonly handlers: {\n        [event: string]: SocketEventHandler[];\n    } = {};\n    private wasConnected = false;\n    private connectTimer: ReturnType<typeof setTimeout> | null = null;\n    private connectingTimer: ReturnType<typeof setTimeout> | null = null;\n    private connectionCount = 0;\n    private callbacks: ({ ts: number; cb: SocketEventHandler; id: number } | null)[] = [];\n    private pending: { name: string; args: any[] }[] = []; // pending requests till connection established\n    private id = 0;\n    private lastPong: number = 0;\n    private socket: WebSocket | null = null;\n    private url: string = '';\n    private options: ConnectOptions | null = null;\n    private pingInterval: ReturnType<typeof setInterval> | null = null;\n    private sessionID = 0;\n    private authTimeout: ReturnType<typeof setTimeout> | null = null;\n\n    public connected = false;\n\n    private readonly log: {\n        debug: (text: string) => void;\n        warn: (text: string) => void;\n        error: (text: string) => void;\n    };\n\n    constructor() {\n        this.log = {\n            debug: (text: string) => DEBUG && console.log(`[${new Date().toISOString()}] ${text}`),\n            warn: (text: string) => console.warn(`[${new Date().toISOString()}] ${text}`),\n            error: (text: string) => console.error(`[${new Date().toISOString()}] ${text}`),\n        };\n    }\n\n    private static getQuery(_url: string): Record<string, string> {\n        const query = _url.split('?')[1] || '';\n        const parts = query.split('&');\n        const result: Record<string, string> = {};\n        for (let p = 0; p < parts.length; p++) {\n            const parts1 = parts[p].split('=');\n            result[parts1[0]] = decodeURIComponent(parts[1]);\n        }\n        return result;\n    }\n\n    connect(url?: string, options?: ConnectOptions): SocketClient {\n        this.log.debug('Try to connect');\n\n        // remove hash\n        if (url) {\n            url = url.split('#')[0];\n        }\n\n        this.id = 0;\n        this.connectTimer && clearInterval(this.connectTimer);\n        this.connectTimer = null;\n\n        // eslint-disable-next-line no-undef\n        this.url = this.url || url || window.location.href;\n        this.options = this.options || JSON.parse(JSON.stringify(options || {}));\n        if (!this.options) {\n            throw new Error('No options provided!');\n        }\n\n        this.options.pongTimeout = parseInt(this.options.pongTimeout as unknown as string, 10) || 60000; // Timeout for answer for ping (pong)\n        this.options.pingInterval = parseInt(this.options.pingInterval as unknown as string, 10) || 5000; // Ping interval\n        this.options.connectTimeout = parseInt(this.options.connectTimeout as unknown as string, 10) || 3000; // connection request timeout\n        this.options.authTimeout = parseInt(this.options.authTimeout as unknown as string, 10) || 3000; // Authentication timeout\n        this.options.connectInterval = parseInt(this.options.connectInterval as unknown as string, 10) || 1000; // Interval between connection attempts\n        this.options.connectMaxAttempt = parseInt(this.options.connectMaxAttempt as unknown as string, 10) || 5; // Every connection attempt the interval increasing at options.connectInterval till max this number\n\n        this.sessionID = Date.now();\n        try {\n            if (this.url === '/') {\n                let parts = window.location.pathname.split('/');\n                // remove filename\n                if (window.location.pathname.endsWith('.html') || window.location.pathname.endsWith('.htm')) {\n                    parts.pop();\n                }\n\n                // eslint-disable-next-line no-undef\n                this.url = `${window.location.protocol}//${window.location.host}/${parts.join('/')}`;\n            }\n\n            // extract all query attributes\n            const query = SocketClient.getQuery(this.url);\n            if (query.sid) {\n                delete query.sid;\n            }\n\n            if (query.hasOwnProperty('')) {\n                delete query[''];\n            }\n\n            let u: string = `${this.url.replace(/^http/, 'ws').split('?')[0]}?sid=${this.sessionID}`;\n\n            // Apply a query to new url\n            if (Object.keys(query).length) {\n                u += `&${Object.keys(query)\n                    .map(attr => (query[attr] === undefined ? attr : `${attr}=${query[attr]}`))\n                    .join('&')}`;\n            }\n\n            if (this.options?.name && !query.name) {\n                u += `&name=${encodeURIComponent(this.options.name)}`;\n            }\n            // \"ws://www.example.com/socketserver\"\n            // eslint-disable-next-line no-undef\n            this.socket = new WebSocket(u);\n        } catch (error) {\n            this.handlers.error?.forEach(cb => cb.call(this, error));\n            this.close();\n            return this;\n        }\n\n        this.connectingTimer = setTimeout(() => {\n            this.connectingTimer = null;\n            this.log.warn('No READY flag received in 3 seconds. Re-init');\n            this.close(); // re-init connection, because no ___ready___ received in 2000 ms\n        }, this.options.connectTimeout);\n\n        this.socket.onopen = (): void /*event*/ => {\n            this.lastPong = Date.now();\n            this.connectionCount = 0;\n\n            this.pingInterval = setInterval((): void => {\n                if (!this.options) {\n                    throw new Error('No options provided!');\n                }\n\n                if (Date.now() - this.lastPong > (this.options?.pingInterval || 5000) - 10) {\n                    try {\n                        this.socket?.send(JSON.stringify([MESSAGE_TYPES.PING]));\n                    } catch (e) {\n                        this.log.warn(`Cannot send ping. Close connection: ${e}`);\n                        this.close();\n                        this._garbageCollect();\n                        return;\n                    }\n                }\n                if (Date.now() - this.lastPong > (this.options?.pongTimeout || 60000)) {\n                    this.close();\n                }\n                this._garbageCollect();\n            }, this.options?.pingInterval || 5000);\n        };\n\n        this.socket.onclose = (event: CloseEvent): void => {\n            if (event.code === 3001) {\n                this.log.warn('ws closed');\n            } else {\n                this.log.error(`ws connection error: ${ERRORS[event.code]}`);\n            }\n            this.close();\n        };\n\n        // @ts-expect-error invalid typing\n        this.socket.onerror = (error: CloseEvent): void  => {\n            if (this.connected && this.socket) {\n                if (this.socket.readyState === 1) {\n                    this.log.error(`ws normal error: ${error.type}`);\n                }\n                this.errorHandlers.forEach(cb => cb.call(this, ERRORS[error.code] || 'UNKNOWN'));\n            }\n            this.close();\n        };\n\n        this.socket.onmessage = (message: MessageEvent<string>): void => {\n            this.lastPong = Date.now();\n            if (!message?.data || typeof message.data !== 'string') {\n                console.error(`Received invalid message: ${JSON.stringify(message)}`);\n                return;\n            }\n            let data;\n            try {\n                data = JSON.parse(message.data);\n            } catch (e) {\n                console.error(`Received invalid message: ${JSON.stringify(message.data)}`);\n                return;\n            }\n\n            const type: number = data[0];\n            const id: number = data[1];\n            const name: string = data[2];\n            const args: any[] = data[3];\n\n            if (this.authTimeout) {\n                clearTimeout(this.authTimeout);\n                this.authTimeout = null;\n            }\n\n            if (type === MESSAGE_TYPES.CALLBACK) {\n                this.findAnswer(id, args);\n            } else if (type === MESSAGE_TYPES.MESSAGE) {\n                if (name === '___ready___') {\n                    this.connected = true;\n\n                    if (this.wasConnected) {\n                        this.reconnectHandlers.forEach(cb => cb.call(this, true));\n                    } else {\n                        this.connectHandlers.forEach(cb => cb.call(this, true));\n                        this.wasConnected = true;\n                    }\n\n                    this.connectingTimer && clearTimeout(this.connectingTimer);\n                    this.connectingTimer = null;\n\n                    // resend all pending requests\n                    if (this.pending.length) {\n                        this.pending.forEach(({ name, args }) => this.emit(name, ...args));\n\n                        this.pending = [];\n                    }\n                } else if (args) {\n                    this.handlers[name]?.forEach(cb => cb.apply(this, args));\n                } else {\n                    this.handlers[name]?.forEach(cb => cb.call(this));\n                }\n            } else if (type === MESSAGE_TYPES.PING) {\n                if (this.socket) {\n                    this.socket.send(JSON.stringify([MESSAGE_TYPES.PONG]));\n                } else {\n                    this.log.warn('Cannot do pong: connection closed');\n                }\n            } else if (type === MESSAGE_TYPES.PONG) {\n                // lastPong saved\n            } else {\n                this.log.warn(`Received unknown message type: ${type}`);\n            }\n        };\n\n        return this;\n    }\n\n    private _garbageCollect(): void {\n        const now = Date.now();\n        let empty = 0;\n        if (!DEBUG) {\n            for (let i = 0; i < this.callbacks.length; i++) {\n                const callback: { ts: number; cb: SocketEventHandler; id: number } | null = this.callbacks[i];\n                if (callback) {\n                    if (callback.ts > now) {\n                        const cb = callback.cb;\n                        setTimeout(cb, 0, 'timeout');\n                        this.callbacks[i] = null;\n                        empty++;\n                    } // else callback is still valid\n                } else {\n                    empty++;\n                }\n            }\n        }\n\n        // remove nulls\n        if (empty > this.callbacks.length / 2) {\n            const newCallback = [];\n            for (let i = 0; i < this.callbacks.length; i++) {\n                this.callbacks[i] && newCallback.push(this.callbacks[i]);\n            }\n            this.callbacks = newCallback;\n        }\n    }\n\n    private withCallback(name: string, id: number, args: any[], cb: SocketEventHandler): void {\n        if (name === 'authenticate') {\n            this.authTimeout = setTimeout(() => {\n                this.authTimeout = null;\n                if (this.connected) {\n                    this.log.debug('Authenticate timeout');\n                    this.handlers.error?.forEach(cb => cb.call(this, 'Authenticate timeout'));\n                }\n                this.close();\n            }, this.options?.authTimeout || 3000);\n        }\n        this.callbacks.push({ id, cb, ts: DEBUG ? 0 : Date.now() + 30000 });\n        this.socket?.send(JSON.stringify([MESSAGE_TYPES.CALLBACK, id, name, args]));\n    }\n\n    private findAnswer(id: number, args: any[]): void {\n        for (let i = 0; i < this.callbacks.length; i++) {\n            const callback = this.callbacks[i];\n            if (callback?.id === id) {\n                const cb = callback.cb;\n                cb.apply(null, args);\n                this.callbacks[i] = null;\n            }\n        }\n    }\n\n    emit = (name: string, ...args: any[]): void => {\n        if (!this.socket || !this.connected) {\n            if (!this.wasConnected) {\n                // cache all calls till connected\n                this.pending.push({ name, args });\n            } else {\n                this.log.warn('Not connected');\n            }\n            return;\n        }\n\n        this.id++;\n\n        if (name === 'writeFile' && args && typeof args[2] !== 'string' && args[2]) {\n            // Arguments: arg1,     arg2,     arg3, arg4\n            // Arguments: _adapter, filename, data, callback\n            let binary = '';\n            const bytes = new Uint8Array(args[2]);\n            const len = bytes.byteLength;\n            for (let i = 0; i < len; i++) {\n                binary += String.fromCharCode(bytes[i]);\n            }\n            args[2] = window.btoa(binary);\n        }\n\n        try {\n            // if the last argument is a function\n            if (args && typeof args[args.length - 1] === 'function') {\n                const _args = [...args];\n                const eventHandler: SocketEventHandler = _args.pop();\n                this.withCallback(name, this.id, _args, eventHandler);\n            } else if (!args?.length) {\n                this.socket.send(JSON.stringify([MESSAGE_TYPES.MESSAGE, this.id, name]));\n            } else {\n                this.socket.send(JSON.stringify([MESSAGE_TYPES.MESSAGE, this.id, name, args]));\n            }\n        } catch (e) {\n            console.error(`Cannot send: ${e}`);\n            this.close();\n        }\n    };\n\n    on(name: string, cb: SocketEventHandler | SocketErrorHandler | SocketDisconnectionHandler | SocketConnectionHandler): void {\n        if (cb) {\n            if (name === 'connect') {\n                this.connectHandlers.push(cb as SocketConnectionHandler);\n            } else if (name === 'disconnect') {\n                this.disconnectHandlers.push(cb as SocketDisconnectionHandler);\n            } else if (name === 'reconnect') {\n                this.reconnectHandlers.push(cb as SocketConnectionHandler);\n            } else if (name === 'error') {\n                    this.errorHandlers.push(cb as SocketErrorHandler);\n            } else {\n                this.handlers[name] = this.handlers[name] || [];\n                this.handlers[name].push(cb as SocketEventHandler);\n            }\n        }\n    }\n\n    off(name: string, cb: SocketEventHandler | SocketErrorHandler | SocketDisconnectionHandler | SocketConnectionHandler): void {\n        if (name === 'connect') {\n            const pos = this.connectHandlers.indexOf(cb as SocketConnectionHandler);\n            if (pos !== -1) {\n                this.connectHandlers.splice(pos, 1);\n            }\n        } else if (name === 'disconnect') {\n            const pos = this.disconnectHandlers.indexOf(cb as SocketDisconnectionHandler);\n            if (pos !== -1) {\n                this.disconnectHandlers.splice(pos, 1);\n            }\n        } else if (name === 'reconnect') {\n            const pos = this.reconnectHandlers.indexOf(cb as SocketConnectionHandler);\n            if (pos !== -1) {\n                this.reconnectHandlers.splice(pos, 1);\n            }\n        } else if (name === 'error') {\n            const pos = this.errorHandlers.indexOf(cb as SocketErrorHandler);\n            if (pos !== -1) {\n                this.errorHandlers.splice(pos, 1);\n            }\n        } else if (this.handlers[name]) {\n            const pos = this.handlers[name].indexOf(cb as SocketEventHandler);\n            if (pos !== -1) {\n                this.handlers[name].splice(pos, 1);\n                if (!this.handlers[name].length) {\n                    delete this.handlers[name];\n                }\n            }\n        }\n    }\n\n    close(): SocketClient {\n        this.pingInterval && clearInterval(this.pingInterval);\n        this.pingInterval = null;\n\n        this.authTimeout && clearTimeout(this.authTimeout);\n        this.authTimeout = null;\n\n        this.connectingTimer && clearTimeout(this.connectingTimer);\n        this.connectingTimer = null;\n\n        if (this.socket) {\n            try {\n                this.socket.close();\n            } catch (e) {\n                // ignore\n            }\n            this.socket = null;\n        }\n\n        if (this.connected) {\n            this.disconnectHandlers.forEach(cb => cb.call(this));\n            this.connected = false;\n        }\n\n        this.callbacks = [];\n\n        this._reconnect();\n\n        return this;\n    }\n\n    // alias for back compatibility\n    disconnect = this.close;\n\n    destroy(): void {\n        this.close();\n        this.connectTimer && clearTimeout(this.connectTimer);\n        this.connectTimer = null;\n    }\n\n    private _reconnect(): void {\n        if (!this.connectTimer) {\n            this.log.debug(`Start reconnect ${this.connectionCount}`);\n            this.connectTimer = setTimeout(() => {\n                if (!this.options) {\n                    throw new Error('No options provided!');\n                }\n                this.connectTimer = null;\n                if (this.connectionCount < (this.options?.connectMaxAttempt || 5)) {\n                    this.connectionCount++;\n                }\n                this.connect(this.url, this.options);\n            }, this.connectionCount * (this.options?.connectInterval || 1000));\n        } else {\n            this.log.debug(`Reconnect is already running ${this.connectionCount}`);\n        }\n    }\n}\n\n// every time creates a new socket\nfunction connect(url?: string, options?: ConnectOptions): SocketClient {\n    const socketClient = new SocketClient();\n    socketClient.connect(url, options);\n    return socketClient;\n}\n\nwindow.io = {\n    connect,\n};\n"]}
{
  "version": 3,
  "sources": ["../../socket.io.ts"],
  "sourcesContent": ["/*!\n * ioBroker WebSockets\n * Copyright 2020-2025, bluefox <dogafox@gmail.com>\n * Released under the MIT License.\n * v 2.0.2 (2025_03_05)\n */\ninterface ConnectOptions {\n    /** Connection name, so the backend knows who wants to connect. Optional */\n    name?: string;\n    /** Timeout for answer for ping (pong) */\n    pongTimeout?: number;\n    /** Ping interval */\n    pingInterval?: number;\n    /** connection request timeout */\n    connectTimeout?: number;\n    /** Authentication timeout */\n    authTimeout?: number;\n    /** Interval between connection attempts */\n    connectInterval?: number;\n    /** Every connection attempt the interval increasing at options.connectInterval till max this number */\n    connectMaxAttempt?: number;\n    /** Token for authentication */\n    token?: string;\n}\n\nconst MESSAGE_TYPES: Record<string, number> = {\n    MESSAGE: 0,\n    PING: 1,\n    PONG: 2,\n    CALLBACK: 3,\n};\n\nconst DEBUG = true;\n\nconst ERRORS: Record<number, string> = {\n    1000: 'CLOSE_NORMAL', // Successful operation / regular socket shutdown\n    1001: 'CLOSE_GOING_AWAY', // Client is leaving (browser tab closing)\n    1002: 'CLOSE_PROTOCOL_ERROR', // Endpoint received a malformed frame\n    1003: 'CLOSE_UNSUPPORTED', // Endpoint received an unsupported frame (e.g., binary-only endpoint received text frame)\n    1005: 'CLOSED_NO_STATUS', // Expected close status, received none\n    1006: 'CLOSE_ABNORMAL', // No close code frame has been received\n    1007: 'Unsupported payload', // Endpoint received an inconsistent message (e.g., malformed UTF-8)\n    1008: 'Policy violation', // Generic code used for situations other than 1003 and 1009\n    1009: 'CLOSE_TOO_LARGE', // Endpoint won't process large frame\n    1010: 'Mandatory extension', // Client wanted an extension which server did not negotiate\n    1011: 'Server error', // Internal server error while operating\n    1012: 'Service restart', // Server/service is restarting\n    1013: 'Try again later', // Temporary server condition forced blocking client's request\n    1014: 'Bad gateway\tServer', // acting as gateway received an invalid response\n    1015: 'TLS handshake fail', // Transport Layer Security handshake failure\n};\n\ntype SocketEventHandler = (...args: any[]) => void;\ntype SocketConnectionHandler = (connected: boolean) => void;\ntype SocketDisconnectionHandler = () => void;\ntype SocketErrorHandler = (err: string) => void;\n\n// possible events: connect, disconnect, reconnect, error, connect_error\nclass SocketClient {\n    private readonly connectHandlers: SocketConnectionHandler[] = [];\n    private readonly reconnectHandlers: SocketConnectionHandler[] = [];\n    private readonly disconnectHandlers: SocketDisconnectionHandler[] = [];\n    private readonly errorHandlers: SocketErrorHandler[] = [];\n\n    private readonly handlers: {\n        [event: string]: SocketEventHandler[];\n    } = {};\n    private wasConnected = false;\n    private connectTimer: ReturnType<typeof setTimeout> | null = null;\n    private connectingTimer: ReturnType<typeof setTimeout> | null = null;\n    private connectionCount = 0;\n    private callbacks: ({ ts: number; cb: SocketEventHandler; id: number } | null)[] = [];\n    private pending: { name: string; args: any[] }[] = []; // pending requests till connection established\n    private id = 0;\n    private lastPong: number = 0;\n    private socket: WebSocket | null = null;\n    private url: string = '';\n    private options: ConnectOptions | null = null;\n    private pingInterval: ReturnType<typeof setInterval> | null = null;\n    private sessionID = 0;\n    private authTimeout: ReturnType<typeof setTimeout> | null = null;\n\n    public connected = false;\n\n    private readonly log: {\n        debug: (text: string) => void;\n        warn: (text: string) => void;\n        error: (text: string) => void;\n    };\n\n    constructor() {\n        this.log = {\n            debug: (text: string) => DEBUG && console.log(`[${new Date().toISOString()}] ${text}`),\n            warn: (text: string) => console.warn(`[${new Date().toISOString()}] ${text}`),\n            error: (text: string) => console.error(`[${new Date().toISOString()}] ${text}`),\n        };\n    }\n\n    private static getQuery(_url: string): Record<string, string> {\n        const query = _url.split('?')[1] || '';\n        const parts = query.split('&');\n        const result: Record<string, string> = {};\n        for (let p = 0; p < parts.length; p++) {\n            const parts1 = parts[p].split('=');\n            result[parts1[0]] = decodeURIComponent(parts[1]);\n        }\n        return result;\n    }\n\n    connect(url?: string, options?: ConnectOptions): SocketClient {\n        this.log.debug('Try to connect');\n\n        // remove hash\n        if (url) {\n            url = url.split('#')[0];\n        }\n\n        this.id = 0;\n        this.connectTimer && clearInterval(this.connectTimer);\n        this.connectTimer = null;\n\n        this.url = this.url || url || window.location.href;\n        this.options = this.options || JSON.parse(JSON.stringify(options || {}));\n        if (!this.options) {\n            throw new Error('No options provided!');\n        }\n\n        this.options.pongTimeout = parseInt(this.options.pongTimeout as unknown as string, 10) || 60000; // Timeout for answer for ping (pong)\n        this.options.pingInterval = parseInt(this.options.pingInterval as unknown as string, 10) || 5000; // Ping interval\n        this.options.connectTimeout = parseInt(this.options.connectTimeout as unknown as string, 10) || 3000; // connection request timeout\n        this.options.authTimeout = parseInt(this.options.authTimeout as unknown as string, 10) || 3000; // Authentication timeout\n        this.options.connectInterval = parseInt(this.options.connectInterval as unknown as string, 10) || 1000; // Interval between connection attempts\n        this.options.connectMaxAttempt = parseInt(this.options.connectMaxAttempt as unknown as string, 10) || 5; // Every connection attempt the interval increasing at options.connectInterval till max this number\n\n        this.sessionID = Date.now();\n        try {\n            if (this.url === '/') {\n                const parts = window.location.pathname.split('/');\n                // remove filename\n                if (window.location.pathname.endsWith('.html') || window.location.pathname.endsWith('.htm')) {\n                    parts.pop();\n                }\n\n                this.url = `${window.location.protocol}//${window.location.host}/${parts.join('/')}`;\n            }\n\n            // extract all query attributes\n            const query = SocketClient.getQuery(this.url);\n            if (query.sid) {\n                delete query.sid;\n            }\n\n            if (Object.prototype.hasOwnProperty.call(query, '')) {\n                delete query[''];\n            }\n\n            let u = `${this.url.replace(/^http/, 'ws').split('?')[0]}?sid=${this.sessionID}`;\n\n            // Apply a query to new url\n            if (Object.keys(query).length) {\n                u += `&${Object.keys(query)\n                    .map(attr => (query[attr] === undefined ? attr : `${attr}=${query[attr]}`))\n                    .join('&')}`;\n            }\n\n            if (this.options?.name && !query.name) {\n                u += `&name=${encodeURIComponent(this.options.name)}`;\n            }\n            if (this.options?.token) {\n                u += `&token=${this.options.token}`;\n            }\n            // \"ws://www.example.com/socketserver\"\n            this.socket = new WebSocket(u);\n        } catch (error) {\n            this.handlers.error?.forEach(cb => cb.call(this, error));\n            this.close();\n            return this;\n        }\n\n        this.connectingTimer = setTimeout(() => {\n            this.connectingTimer = null;\n            this.log.warn('No READY flag received in 3 seconds. Re-init');\n            this.close(); // re-init connection, because no ___ready___ received in 2000 ms\n        }, this.options.connectTimeout);\n\n        this.socket.onopen = (): void /*event*/ => {\n            this.lastPong = Date.now();\n            this.connectionCount = 0;\n\n            this.pingInterval = setInterval((): void => {\n                if (!this.options) {\n                    throw new Error('No options provided!');\n                }\n\n                if (Date.now() - this.lastPong > (this.options?.pingInterval || 5000) - 10) {\n                    try {\n                        this.socket?.send(JSON.stringify([MESSAGE_TYPES.PING]));\n                    } catch (e) {\n                        this.log.warn(`Cannot send ping. Close connection: ${e}`);\n                        this.close();\n                        this._garbageCollect();\n                        return;\n                    }\n                }\n                if (Date.now() - this.lastPong > (this.options?.pongTimeout || 60000)) {\n                    this.close();\n                }\n                this._garbageCollect();\n            }, this.options?.pingInterval || 5000);\n        };\n\n        this.socket.onclose = (event: CloseEvent): void => {\n            if (event.code === 3001) {\n                this.log.warn('ws closed');\n            } else {\n                this.log.error(`ws connection error: ${ERRORS[event.code]}`);\n            }\n            this.close();\n        };\n\n        // @ts-expect-error invalid typing\n        this.socket.onerror = (error: CloseEvent): void => {\n            if (this.connected && this.socket) {\n                if (this.socket.readyState === 1) {\n                    this.log.error(`ws normal error: ${error.type}`);\n                }\n                this.errorHandlers.forEach(cb => cb.call(this, ERRORS[error.code] || 'UNKNOWN'));\n            }\n            this.close();\n        };\n\n        this.socket.onmessage = (message: MessageEvent<string>): void => {\n            this.lastPong = Date.now();\n            if (!message?.data || typeof message.data !== 'string') {\n                console.error(`Received invalid message: ${JSON.stringify(message)}`);\n                return;\n            }\n            let data;\n            try {\n                data = JSON.parse(message.data);\n            } catch {\n                console.error(`Received invalid message: ${JSON.stringify(message.data)}`);\n                return;\n            }\n\n            const type: number = data[0];\n            const id: number = data[1];\n            const name: string = data[2];\n            const args: any[] = data[3];\n\n            if (this.authTimeout) {\n                clearTimeout(this.authTimeout);\n                this.authTimeout = null;\n            }\n\n            if (type === MESSAGE_TYPES.CALLBACK) {\n                this.findAnswer(id, args);\n            } else if (type === MESSAGE_TYPES.MESSAGE) {\n                if (name === '___ready___') {\n                    this.connected = true;\n\n                    if (this.wasConnected) {\n                        this.reconnectHandlers.forEach(cb => cb.call(this, true));\n                    } else {\n                        this.connectHandlers.forEach(cb => cb.call(this, true));\n                        this.wasConnected = true;\n                    }\n\n                    this.connectingTimer && clearTimeout(this.connectingTimer);\n                    this.connectingTimer = null;\n\n                    // resend all pending requests\n                    if (this.pending.length) {\n                        this.pending.forEach(({ name, args }) => this.emit(name, ...args));\n\n                        this.pending = [];\n                    }\n                } else if (args) {\n                    this.handlers[name]?.forEach(cb => cb.apply(this, args));\n                } else {\n                    this.handlers[name]?.forEach(cb => cb.call(this));\n                }\n            } else if (type === MESSAGE_TYPES.PING) {\n                if (this.socket) {\n                    this.socket.send(JSON.stringify([MESSAGE_TYPES.PONG]));\n                } else {\n                    this.log.warn('Cannot do pong: connection closed');\n                }\n            } else if (type === MESSAGE_TYPES.PONG) {\n                // lastPong saved\n            } else {\n                this.log.warn(`Received unknown message type: ${type}`);\n            }\n        };\n\n        return this;\n    }\n\n    private _garbageCollect(): void {\n        const now = Date.now();\n        let empty = 0;\n        if (!DEBUG) {\n            for (let i = 0; i < this.callbacks.length; i++) {\n                const callback: { ts: number; cb: SocketEventHandler; id: number } | null = this.callbacks[i];\n                if (callback) {\n                    if (callback.ts > now) {\n                        const cb = callback.cb;\n                        setTimeout(cb, 0, 'timeout');\n                        this.callbacks[i] = null;\n                        empty++;\n                    } // else callback is still valid\n                } else {\n                    empty++;\n                }\n            }\n        }\n\n        // remove nulls\n        if (empty > this.callbacks.length / 2) {\n            const newCallback = [];\n            for (let i = 0; i < this.callbacks.length; i++) {\n                this.callbacks[i] && newCallback.push(this.callbacks[i]);\n            }\n            this.callbacks = newCallback;\n        }\n    }\n\n    private withCallback(name: string, id: number, args: any[], cb: SocketEventHandler): void {\n        if (name === 'authenticate') {\n            this.authTimeout = setTimeout(() => {\n                this.authTimeout = null;\n                if (this.connected) {\n                    this.log.debug('Authenticate timeout');\n                    this.handlers.error?.forEach(cb => cb.call(this, 'Authenticate timeout'));\n                }\n                this.close();\n            }, this.options?.authTimeout || 3000);\n        }\n        this.callbacks.push({ id, cb, ts: DEBUG ? 0 : Date.now() + 30000 });\n        this.socket?.send(JSON.stringify([MESSAGE_TYPES.CALLBACK, id, name, args]));\n    }\n\n    private findAnswer(id: number, args: any[]): void {\n        for (let i = 0; i < this.callbacks.length; i++) {\n            const callback = this.callbacks[i];\n            if (callback?.id === id) {\n                const cb = callback.cb;\n                cb.call(null, ...args);\n                this.callbacks[i] = null;\n            }\n        }\n    }\n\n    emit = (name: string, ...args: any[]): void => {\n        if (!this.socket || !this.connected) {\n            if (!this.wasConnected) {\n                // cache all calls till connected\n                this.pending.push({ name, args });\n            } else {\n                this.log.warn('Not connected');\n            }\n            return;\n        }\n\n        this.id++;\n\n        if (name === 'writeFile' && args && typeof args[2] !== 'string' && args[2]) {\n            // Arguments: arg1,     arg2,     arg3, arg4\n            // Arguments: _adapter, filename, data, callback\n            let binary = '';\n            const bytes = new Uint8Array(args[2]);\n            const len = bytes.byteLength;\n            for (let i = 0; i < len; i++) {\n                binary += String.fromCharCode(bytes[i]);\n            }\n            args[2] = window.btoa(binary);\n        }\n\n        try {\n            // if the last argument is a function\n            if (args && typeof args[args.length - 1] === 'function') {\n                const _args = [...args];\n                const eventHandler: SocketEventHandler = _args.pop();\n                this.withCallback(name, this.id, _args, eventHandler);\n            } else if (!args?.length) {\n                this.socket.send(JSON.stringify([MESSAGE_TYPES.MESSAGE, this.id, name]));\n            } else {\n                this.socket.send(JSON.stringify([MESSAGE_TYPES.MESSAGE, this.id, name, args]));\n            }\n        } catch (e) {\n            console.error(`Cannot send: ${e}`);\n            this.close();\n        }\n    };\n\n    on(\n        name: string,\n        cb: SocketEventHandler | SocketErrorHandler | SocketDisconnectionHandler | SocketConnectionHandler,\n    ): void {\n        if (cb) {\n            if (name === 'connect') {\n                this.connectHandlers.push(cb as SocketConnectionHandler);\n            } else if (name === 'disconnect') {\n                this.disconnectHandlers.push(cb as SocketDisconnectionHandler);\n            } else if (name === 'reconnect') {\n                this.reconnectHandlers.push(cb as SocketConnectionHandler);\n            } else if (name === 'error') {\n                this.errorHandlers.push(cb as SocketErrorHandler);\n            } else {\n                this.handlers[name] = this.handlers[name] || [];\n                this.handlers[name].push(cb as SocketEventHandler);\n            }\n        }\n    }\n\n    off(\n        name: string,\n        cb: SocketEventHandler | SocketErrorHandler | SocketDisconnectionHandler | SocketConnectionHandler,\n    ): void {\n        if (name === 'connect') {\n            const pos = this.connectHandlers.indexOf(cb as SocketConnectionHandler);\n            if (pos !== -1) {\n                this.connectHandlers.splice(pos, 1);\n            }\n        } else if (name === 'disconnect') {\n            const pos = this.disconnectHandlers.indexOf(cb as SocketDisconnectionHandler);\n            if (pos !== -1) {\n                this.disconnectHandlers.splice(pos, 1);\n            }\n        } else if (name === 'reconnect') {\n            const pos = this.reconnectHandlers.indexOf(cb as SocketConnectionHandler);\n            if (pos !== -1) {\n                this.reconnectHandlers.splice(pos, 1);\n            }\n        } else if (name === 'error') {\n            const pos = this.errorHandlers.indexOf(cb as SocketErrorHandler);\n            if (pos !== -1) {\n                this.errorHandlers.splice(pos, 1);\n            }\n        } else if (this.handlers[name]) {\n            const pos = this.handlers[name].indexOf(cb as SocketEventHandler);\n            if (pos !== -1) {\n                this.handlers[name].splice(pos, 1);\n                if (!this.handlers[name].length) {\n                    delete this.handlers[name];\n                }\n            }\n        }\n    }\n\n    close(): SocketClient {\n        this.pingInterval && clearInterval(this.pingInterval);\n        this.pingInterval = null;\n\n        this.authTimeout && clearTimeout(this.authTimeout);\n        this.authTimeout = null;\n\n        this.connectingTimer && clearTimeout(this.connectingTimer);\n        this.connectingTimer = null;\n\n        if (this.socket) {\n            try {\n                this.socket.close();\n            } catch {\n                // ignore\n            }\n            this.socket = null;\n        }\n\n        if (this.connected) {\n            this.disconnectHandlers.forEach(cb => cb.call(this));\n            this.connected = false;\n        }\n\n        this.callbacks = [];\n\n        this._reconnect();\n\n        return this;\n    }\n\n    // alias for back compatibility\n    disconnect = this.close;\n\n    destroy(): void {\n        this.close();\n        this.connectTimer && clearTimeout(this.connectTimer);\n        this.connectTimer = null;\n    }\n\n    private _reconnect(): void {\n        if (!this.connectTimer) {\n            this.log.debug(`Start reconnect ${this.connectionCount}`);\n            this.connectTimer = setTimeout(\n                () => {\n                    if (!this.options) {\n                        throw new Error('No options provided!');\n                    }\n                    this.connectTimer = null;\n                    if (this.connectionCount < (this.options?.connectMaxAttempt || 5)) {\n                        this.connectionCount++;\n                    }\n                    this.connect(this.url, this.options);\n                },\n                this.connectionCount * (this.options?.connectInterval || 1000),\n            );\n        } else {\n            this.log.debug(`Reconnect is already running ${this.connectionCount}`);\n        }\n    }\n}\n\n// every time creates a new socket\nfunction connect(url?: string, options?: ConnectOptions): SocketClient {\n    const socketClient = new SocketClient();\n    socketClient.connect(url, options);\n    return socketClient;\n}\n\nwindow.io = {\n    connect,\n};\n"],
  "mappings": "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",
  "names": ["name", "args", "cb"]
}

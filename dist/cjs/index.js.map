{
  "version": 3,
  "sources": ["../esm/index.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SocketClient = void 0;\nexports.connect = connect;\nconst MESSAGE_TYPES = {\n    MESSAGE: 0,\n    PING: 1,\n    PONG: 2,\n    CALLBACK: 3,\n};\nconst DEBUG = true;\nconst ERRORS = {\n    1000: 'CLOSE_NORMAL', // Successful operation / regular socket shutdown\n    1001: 'CLOSE_GOING_AWAY', // Client is leaving (browser tab closing)\n    1002: 'CLOSE_PROTOCOL_ERROR', // Endpoint received a malformed frame\n    1003: 'CLOSE_UNSUPPORTED', // Endpoint received an unsupported frame (e.g., binary-only endpoint received text frame)\n    1005: 'CLOSED_NO_STATUS', // Expected close status, received none\n    1006: 'CLOSE_ABNORMAL', // No close code frame has been received\n    1007: 'Unsupported payload', // Endpoint received an inconsistent message (e.g., malformed UTF-8)\n    1008: 'Policy violation', // Generic code used for situations other than 1003 and 1009\n    1009: 'CLOSE_TOO_LARGE', // Endpoint won't process large frame\n    1010: 'Mandatory extension', // Client wanted an extension which server did not negotiate\n    1011: 'Server error', // Internal server error while operating\n    1012: 'Service restart', // Server/service is restarting\n    1013: 'Try again later', // Temporary server condition forced blocking client's request\n    1014: 'Bad gateway\tServer', // acting as gateway received an invalid response\n    1015: 'TLS handshake fail', // Transport Layer Security handshake failure\n};\n// possible events: connect, disconnect, reconnect, error, connect_error\nclass SocketClient {\n    connectHandlers = [];\n    reconnectHandlers = [];\n    disconnectHandlers = [];\n    errorHandlers = [];\n    handlers = {};\n    wasConnected = false;\n    connectTimer = null;\n    connectingTimer = null;\n    connectionCount = 0;\n    callbacks = [];\n    pending = []; // pending requests till connection established\n    id = 0;\n    lastPong = 0;\n    socket = null;\n    url = '';\n    options = null;\n    pingInterval = null;\n    sessionID = 0;\n    authTimeout = null;\n    connected = false;\n    log;\n    constructor() {\n        this.log = {\n            debug: (text) => DEBUG && console.log(`[${new Date().toISOString()}] ${text}`),\n            warn: (text) => console.warn(`[${new Date().toISOString()}] ${text}`),\n            error: (text) => console.error(`[${new Date().toISOString()}] ${text}`),\n        };\n    }\n    static getQuery(_url) {\n        const query = _url.split('?')[1] || '';\n        const parts = query.split('&');\n        const result = {};\n        for (let p = 0; p < parts.length; p++) {\n            const parts1 = parts[p].split('=');\n            result[parts1[0]] = decodeURIComponent(parts[1]);\n        }\n        return result;\n    }\n    connect(url, options) {\n        this.log.debug('Try to connect');\n        // remove hash\n        if (url) {\n            url = url.split('#')[0];\n        }\n        this.id = 0;\n        this.connectTimer && clearInterval(this.connectTimer);\n        this.connectTimer = null;\n        // eslint-disable-next-line no-undef\n        this.url = this.url || url || window.location.href;\n        this.options = this.options || JSON.parse(JSON.stringify(options || {}));\n        if (!this.options) {\n            throw new Error('No options provided!');\n        }\n        this.options.pongTimeout = parseInt(this.options.pongTimeout, 10) || 60000; // Timeout for answer for ping (pong)\n        this.options.pingInterval = parseInt(this.options.pingInterval, 10) || 5000; // Ping interval\n        this.options.connectTimeout = parseInt(this.options.connectTimeout, 10) || 3000; // connection request timeout\n        this.options.authTimeout = parseInt(this.options.authTimeout, 10) || 3000; // Authentication timeout\n        this.options.connectInterval = parseInt(this.options.connectInterval, 10) || 1000; // Interval between connection attempts\n        this.options.connectMaxAttempt = parseInt(this.options.connectMaxAttempt, 10) || 5; // Every connection attempt the interval increasing at options.connectInterval till max this number\n        this.sessionID = Date.now();\n        try {\n            if (this.url === '/') {\n                let parts = window.location.pathname.split('/');\n                // remove filename\n                if (window.location.pathname.endsWith('.html') || window.location.pathname.endsWith('.htm')) {\n                    parts.pop();\n                }\n                // eslint-disable-next-line no-undef\n                this.url = `${window.location.protocol}//${window.location.host}/${parts.join('/')}`;\n            }\n            // extract all query attributes\n            const query = SocketClient.getQuery(this.url);\n            if (query.sid) {\n                delete query.sid;\n            }\n            if (query.hasOwnProperty('')) {\n                delete query[''];\n            }\n            let u = `${this.url.replace(/^http/, 'ws').split('?')[0]}?sid=${this.sessionID}`;\n            // Apply a query to new url\n            if (Object.keys(query).length) {\n                u += `&${Object.keys(query)\n                    .map(attr => (query[attr] === undefined ? attr : `${attr}=${query[attr]}`))\n                    .join('&')}`;\n            }\n            if (this.options?.name && !query.name) {\n                u += `&name=${encodeURIComponent(this.options.name)}`;\n            }\n            // \"ws://www.example.com/socketserver\"\n            // eslint-disable-next-line no-undef\n            this.socket = new WebSocket(u);\n        }\n        catch (error) {\n            this.handlers.error?.forEach(cb => cb.call(this, error));\n            this.close();\n            return this;\n        }\n        this.connectingTimer = setTimeout(() => {\n            this.connectingTimer = null;\n            this.log.warn('No READY flag received in 3 seconds. Re-init');\n            this.close(); // re-init connection, because no ___ready___ received in 2000 ms\n        }, this.options.connectTimeout);\n        this.socket.onopen = () => {\n            this.lastPong = Date.now();\n            this.connectionCount = 0;\n            this.pingInterval = setInterval(() => {\n                if (!this.options) {\n                    throw new Error('No options provided!');\n                }\n                if (Date.now() - this.lastPong > (this.options?.pingInterval || 5000) - 10) {\n                    try {\n                        this.socket?.send(JSON.stringify([MESSAGE_TYPES.PING]));\n                    }\n                    catch (e) {\n                        this.log.warn(`Cannot send ping. Close connection: ${e}`);\n                        this.close();\n                        this._garbageCollect();\n                        return;\n                    }\n                }\n                if (Date.now() - this.lastPong > (this.options?.pongTimeout || 60000)) {\n                    this.close();\n                }\n                this._garbageCollect();\n            }, this.options?.pingInterval || 5000);\n        };\n        this.socket.onclose = (event) => {\n            if (event.code === 3001) {\n                this.log.warn('ws closed');\n            }\n            else {\n                this.log.error(`ws connection error: ${ERRORS[event.code]}`);\n            }\n            this.close();\n        };\n        // @ts-expect-error invalid typing\n        this.socket.onerror = (error) => {\n            if (this.connected && this.socket) {\n                if (this.socket.readyState === 1) {\n                    this.log.error(`ws normal error: ${error.type}`);\n                }\n                this.errorHandlers.forEach(cb => cb.call(this, ERRORS[error.code] || 'UNKNOWN'));\n            }\n            this.close();\n        };\n        this.socket.onmessage = (message) => {\n            this.lastPong = Date.now();\n            if (!message?.data || typeof message.data !== 'string') {\n                console.error(`Received invalid message: ${JSON.stringify(message)}`);\n                return;\n            }\n            let data;\n            try {\n                data = JSON.parse(message.data);\n            }\n            catch (e) {\n                console.error(`Received invalid message: ${JSON.stringify(message.data)}`);\n                return;\n            }\n            const type = data[0];\n            const id = data[1];\n            const name = data[2];\n            const args = data[3];\n            if (this.authTimeout) {\n                clearTimeout(this.authTimeout);\n                this.authTimeout = null;\n            }\n            if (type === MESSAGE_TYPES.CALLBACK) {\n                this.findAnswer(id, args);\n            }\n            else if (type === MESSAGE_TYPES.MESSAGE) {\n                if (name === '___ready___') {\n                    this.connected = true;\n                    if (this.wasConnected) {\n                        this.reconnectHandlers.forEach(cb => cb.call(this, true));\n                    }\n                    else {\n                        this.connectHandlers.forEach(cb => cb.call(this, true));\n                        this.wasConnected = true;\n                    }\n                    this.connectingTimer && clearTimeout(this.connectingTimer);\n                    this.connectingTimer = null;\n                    // resend all pending requests\n                    if (this.pending.length) {\n                        this.pending.forEach(({ name, args }) => this.emit(name, ...args));\n                        this.pending = [];\n                    }\n                }\n                else if (args) {\n                    this.handlers[name]?.forEach(cb => cb.apply(this, args));\n                }\n                else {\n                    this.handlers[name]?.forEach(cb => cb.call(this));\n                }\n            }\n            else if (type === MESSAGE_TYPES.PING) {\n                if (this.socket) {\n                    this.socket.send(JSON.stringify([MESSAGE_TYPES.PONG]));\n                }\n                else {\n                    this.log.warn('Cannot do pong: connection closed');\n                }\n            }\n            else if (type === MESSAGE_TYPES.PONG) {\n                // lastPong saved\n            }\n            else {\n                this.log.warn(`Received unknown message type: ${type}`);\n            }\n        };\n        return this;\n    }\n    _garbageCollect() {\n        const now = Date.now();\n        let empty = 0;\n        if (!DEBUG) {\n            for (let i = 0; i < this.callbacks.length; i++) {\n                const callback = this.callbacks[i];\n                if (callback) {\n                    if (callback.ts > now) {\n                        const cb = callback.cb;\n                        setTimeout(cb, 0, 'timeout');\n                        this.callbacks[i] = null;\n                        empty++;\n                    } // else callback is still valid\n                }\n                else {\n                    empty++;\n                }\n            }\n        }\n        // remove nulls\n        if (empty > this.callbacks.length / 2) {\n            const newCallback = [];\n            for (let i = 0; i < this.callbacks.length; i++) {\n                this.callbacks[i] && newCallback.push(this.callbacks[i]);\n            }\n            this.callbacks = newCallback;\n        }\n    }\n    withCallback(name, id, args, cb) {\n        if (name === 'authenticate') {\n            this.authTimeout = setTimeout(() => {\n                this.authTimeout = null;\n                if (this.connected) {\n                    this.log.debug('Authenticate timeout');\n                    this.handlers.error?.forEach(cb => cb.call(this, 'Authenticate timeout'));\n                }\n                this.close();\n            }, this.options?.authTimeout || 3000);\n        }\n        this.callbacks.push({ id, cb, ts: DEBUG ? 0 : Date.now() + 30000 });\n        this.socket?.send(JSON.stringify([MESSAGE_TYPES.CALLBACK, id, name, args]));\n    }\n    findAnswer(id, args) {\n        for (let i = 0; i < this.callbacks.length; i++) {\n            const callback = this.callbacks[i];\n            if (callback?.id === id) {\n                const cb = callback.cb;\n                cb.apply(null, args);\n                this.callbacks[i] = null;\n            }\n        }\n    }\n    emit = (name, ...args) => {\n        if (!this.socket || !this.connected) {\n            if (!this.wasConnected) {\n                // cache all calls till connected\n                this.pending.push({ name, args });\n            }\n            else {\n                this.log.warn('Not connected');\n            }\n            return;\n        }\n        this.id++;\n        if (name === 'writeFile' && args && typeof args[2] !== 'string' && args[2]) {\n            // Arguments: arg1,     arg2,     arg3, arg4\n            // Arguments: _adapter, filename, data, callback\n            let binary = '';\n            const bytes = new Uint8Array(args[2]);\n            const len = bytes.byteLength;\n            for (let i = 0; i < len; i++) {\n                binary += String.fromCharCode(bytes[i]);\n            }\n            args[2] = window.btoa(binary);\n        }\n        try {\n            // if the last argument is a function\n            if (args && typeof args[args.length - 1] === 'function') {\n                const _args = [...args];\n                const eventHandler = _args.pop();\n                this.withCallback(name, this.id, _args, eventHandler);\n            }\n            else if (args?.length) {\n                this.socket.send(JSON.stringify([MESSAGE_TYPES.MESSAGE, this.id, name]));\n            }\n            else {\n                this.socket.send(JSON.stringify([MESSAGE_TYPES.MESSAGE, this.id, name, args]));\n            }\n        }\n        catch (e) {\n            console.error(`Cannot send: ${e}`);\n            this.close();\n        }\n    };\n    on(name, cb) {\n        if (cb) {\n            if (name === 'connect') {\n                this.connectHandlers.push(cb);\n            }\n            else if (name === 'disconnect') {\n                this.disconnectHandlers.push(cb);\n            }\n            else if (name === 'reconnect') {\n                this.reconnectHandlers.push(cb);\n            }\n            else if (name === 'error') {\n                this.errorHandlers.push(cb);\n            }\n            else {\n                this.handlers[name] = this.handlers[name] || [];\n                this.handlers[name].push(cb);\n            }\n        }\n    }\n    off(name, cb) {\n        if (name === 'connect') {\n            const pos = this.connectHandlers.indexOf(cb);\n            if (pos !== -1) {\n                this.connectHandlers.splice(pos, 1);\n            }\n        }\n        else if (name === 'disconnect') {\n            const pos = this.disconnectHandlers.indexOf(cb);\n            if (pos !== -1) {\n                this.disconnectHandlers.splice(pos, 1);\n            }\n        }\n        else if (name === 'reconnect') {\n            const pos = this.reconnectHandlers.indexOf(cb);\n            if (pos !== -1) {\n                this.reconnectHandlers.splice(pos, 1);\n            }\n        }\n        else if (name === 'error') {\n            const pos = this.errorHandlers.indexOf(cb);\n            if (pos !== -1) {\n                this.errorHandlers.splice(pos, 1);\n            }\n        }\n        else if (this.handlers[name]) {\n            const pos = this.handlers[name].indexOf(cb);\n            if (pos !== -1) {\n                this.handlers[name].splice(pos, 1);\n                if (!this.handlers[name].length) {\n                    delete this.handlers[name];\n                }\n            }\n        }\n    }\n    close() {\n        this.pingInterval && clearInterval(this.pingInterval);\n        this.pingInterval = null;\n        this.authTimeout && clearTimeout(this.authTimeout);\n        this.authTimeout = null;\n        this.connectingTimer && clearTimeout(this.connectingTimer);\n        this.connectingTimer = null;\n        if (this.socket) {\n            try {\n                this.socket.close();\n            }\n            catch (e) {\n                // ignore\n            }\n            this.socket = null;\n        }\n        if (this.connected) {\n            this.disconnectHandlers.forEach(cb => cb.call(this));\n            this.connected = false;\n        }\n        this.callbacks = [];\n        this._reconnect();\n        return this;\n    }\n    // alias for back compatibility\n    disconnect = this.close;\n    destroy() {\n        this.close();\n        this.connectTimer && clearTimeout(this.connectTimer);\n        this.connectTimer = null;\n    }\n    _reconnect() {\n        if (!this.connectTimer) {\n            this.log.debug(`Start reconnect ${this.connectionCount}`);\n            this.connectTimer = setTimeout(() => {\n                if (!this.options) {\n                    throw new Error('No options provided!');\n                }\n                this.connectTimer = null;\n                if (this.connectionCount < (this.options?.connectMaxAttempt || 5)) {\n                    this.connectionCount++;\n                }\n                this.connect(this.url, this.options);\n            }, this.connectionCount * (this.options?.connectInterval || 1000));\n        }\n        else {\n            this.log.debug(`Reconnect is already running ${this.connectionCount}`);\n        }\n    }\n}\nexports.SocketClient = SocketClient;\n// every time creates a new socket\nfunction connect(url, options) {\n    const socketClient = new SocketClient();\n    socketClient.connect(url, options);\n    return socketClient;\n}\n// eslint-disable-next-line no-undef\nwindow.io = {\n    connect,\n};\n"],
  "mappings": "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",
  "names": ["_a", "_b", "name", "args", "cb"]
}
